import React, { MouseEvent } from 'react';
import { BField, SelectionStatus } from "./BField";
import { BSComp, compMouseDown } from "./BSComp";
import { BMode } from '../components/MapView';
import { BLink } from './BLink';

class AliasedField extends BField {
    alias: string = "";
}

export class BSIterator extends BSComp {

    inputs: BField[] = [];
    outputs: AliasedField[] = [];

    addInput(name: string, typeName: string, array: boolean = false) : BField {
        let bField = new BField(this.vmapping, name, typeName, this.name, false, array);
        this.inputs.push(bField);
        return bField;
    }

    addOutput(name: string, typeName: string, array: boolean = false) {
        this.outputs.push(new AliasedField(this.vmapping, name, typeName, this.name, true, array));
    }

}

const bitClick = (e: MouseEvent<SVGRectElement>, bit: BSIterator) => {  
    console.log("Bit clicked " + bit.name);
    if (bit.vmapping.bMode === BMode.LINKING) {
        if (bit.vmapping.currentLhsNode !== null) {
            console.log("Linking " + bit.vmapping.currentLhsNode.name + " to " + bit.name);
            let newInputField = bit.addInput(bit.vmapping.currentLhsNode.name, bit.vmapping.currentLhsNode.typeName, bit.vmapping.currentLhsNode.array);
            newInputField.selectionStatus = SelectionStatus.LINKED;
            let blink = new BLink(bit.vmapping.currentLhsNode, newInputField);
            bit.vmapping.bLinks.push(blink);
            bit.vmapping.currentLhsNode.selectionStatus = SelectionStatus.LINKED;
            bit.vmapping.currentLhsNode = null;
            bit.vmapping.bMode = BMode.NONE;
            bit.vmapping.render();
        }
    }
}

const bitMoustDown = (e: MouseEvent<SVGRectElement>, bfunc: BSIterator) => {  
    if (bfunc.vmapping.bMode !== BMode.NONE) {
        return;
    } 
    e.preventDefault();
    console.log("mouse down " + e.clientX + " - " + e.clientY);
    bfunc.dragDiffX = e.clientX - bfunc.x;
    bfunc.dragDiffY = e.clientY - bfunc.y;
    bfunc.vmapping.draggingComponent = bfunc;
}

// const iteratorEditConfig = (e: MouseEvent<SVGTextElement>, bIterator: BSIterator) => {
//     e.preventDefault();
//     bIterator.vmapping.setBIterator(bIterator);
// }